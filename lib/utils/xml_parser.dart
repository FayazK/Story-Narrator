// lib/utils/xml_parser.dart
import 'package:xml/xml.dart' as xml;
import '../models/story.dart';
import '../models/character.dart';
import '../models/story_scene.dart';
import '../models/script.dart';

class StoryXmlParser {
  /// Clean XML string to remove unwanted formatting and characters
  static String _cleanXmlString(String xmlString) {
    // Remove any XML declaration line if present
    var cleaned = xmlString.replaceAll(RegExp(r'<\?xml.*?\?>', caseSensitive: false), '');
    
    // Remove any comments
    cleaned = cleaned.replaceAll(RegExp(r'<!--.*?-->', dotAll: true), '');
    
    // Remove any whitespace between tags
    cleaned = cleaned.replaceAll(RegExp(r'>\s+<'), '><');
    
    // Remove any backticks from code blocks
    cleaned = cleaned.replaceAll('```xml', '').replaceAll('```', '');
    
    // Try to ensure there's only one story element
    if (cleaned.contains('</story><story>')) {
      // Take only the first story element if multiple are present
      final regex = RegExp(r'<story>.*?</story>', dotAll: true);
      final match = regex.firstMatch(cleaned);
      if (match != null) {
        cleaned = match.group(0) ?? cleaned;
      }
    }
    
    return cleaned.trim();
  }

  /// Parse a story from XML string generated by Gemini
  static Story parseStoryXml(String xmlString) {
    try {
      // Clean the input string to remove any unwanted characters or formatting
      final cleanedXml = _cleanXmlString(xmlString);
      
      final document = xml.XmlDocument.parse(cleanedXml);
      final storyElement = document.findAllElements('story').first;
      final storyDetailsElement = storyElement.findElements('story_details').first;

      // Parse story details
      final title = storyDetailsElement.findElements('title').first.innerText;
      final imagePrompt = storyDetailsElement.findElements('image_prompt').first.innerText;

      // Parse characters
      final charactersElement = storyDetailsElement.findElements('characters').first;
      final List<Character> characters = [];

      for (var characterElement in charactersElement.findElements('character')) {
        final name = characterElement.findElements('name').first.innerText;
        final gender = characterElement.findElements('gender').first.innerText;
        final voiceDescription = characterElement.findElements('voice_description').first.innerText;

        characters.add(Character(
          storyId: 0, // Will be replaced when saved to database
          name: name,
          gender: gender,
          voiceDescription: voiceDescription,
        ));
      }

      // Parse scenes
      final scenesElement = storyElement.findElements('scenes').first;
      final List<StoryScene> scenes = [];

      for (var sceneElement in scenesElement.findElements('scene')) {
        final sceneNumber = int.parse(sceneElement.getAttribute('number') ?? '0');
        
        // Handle optional elements with null checks
        String? backgroundImage;
        String? characterActions;
        String? backgroundSound;
        String? soundEffects;
        
        try { backgroundImage = sceneElement.findElements('background_image').first.innerText; } catch (e) { /* Optional field */ }
        try { characterActions = sceneElement.findElements('character_actions').first.innerText; } catch (e) { /* Optional field */ }
        try { backgroundSound = sceneElement.findElements('background_sound').first.innerText; } catch (e) { /* Optional field */ }
        try { soundEffects = sceneElement.findElements('sound_effects').first.innerText; } catch (e) { /* Optional field */ }

        final List<Script> scripts = [];
        int scriptOrder = 0;

        // Parse narration script
        try {
          final narrationElement = sceneElement.findElements('narration_script').first;
          final narrationText = narrationElement.innerText;
          final language = narrationElement.getAttribute('language') ?? 'english';
          final urduFlavor = narrationElement.getAttribute('urdu_flavor') == 'true';
          final voiceAction = narrationElement.getAttribute('voice_action');

          // Add narrator script
          scripts.add(Script.narrator(
            sceneId: 0, // Will be replaced when saved to database
            scriptText: narrationText,
            language: language,
            urduFlavor: urduFlavor,
            voiceAction: voiceAction,
            scriptOrder: scriptOrder++,
          ));
        } catch (e) {
          // If narration script is not found, create an empty one
          scripts.add(Script.narrator(
            sceneId: 0,
            scriptText: 'Scene ${sceneNumber}',
            scriptOrder: scriptOrder++,
          ));
        }

        // Parse character scripts
        try {
          final characterScriptsElement = sceneElement.findElements('character_scripts').first;

          for (var scriptElement in characterScriptsElement.findElements('character')) {
            final characterName = scriptElement.getAttribute('name') ?? '';
            final scriptText = scriptElement.innerText;
            final scriptLanguage = scriptElement.getAttribute('language') ?? 'english';
            final scriptUrduFlavor = scriptElement.getAttribute('urdu_flavor') == 'true';
            final scriptVoiceAction = scriptElement.getAttribute('voice_action');

            // Find character id by name
            int characterIndex = characters.indexWhere((c) => c.name == characterName);
            if (characterIndex >= 0) {
              scripts.add(Script.character(
                sceneId: 0, // Will be replaced when saved to database
                characterId: characterIndex, // Using index as temporary ID
                scriptText: scriptText,
                language: scriptLanguage,
                urduFlavor: scriptUrduFlavor,
                voiceAction: scriptVoiceAction,
                scriptOrder: scriptOrder++,
              ));
            }
          }
        } catch (e) {
          // Character scripts are optional
        }

        scenes.add(StoryScene(
          storyId: 0, // Will be replaced when saved to database
          sceneNumber: sceneNumber,
          backgroundImage: backgroundImage,
          characterActions: characterActions,
          backgroundSound: backgroundSound,
          soundEffects: soundEffects,
          scripts: scripts,
        ));
      }

      return Story(
        title: title,
        imagePrompt: imagePrompt,
        characters: characters,
        scenes: scenes,
      );
    } catch (e) {
      print('Error parsing XML: $e');
      throw Exception('Failed to parse story XML: $e');
    }
  }
}