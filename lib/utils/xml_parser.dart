// lib/utils/xml_parser.dart
import 'package:xml/xml.dart' as xml;
import '../models/story.dart';
import '../models/character.dart';
import '../models/story_scene.dart';
import '../models/script.dart';

class StoryXmlParser {
  /// Parse a story from XML string generated by Gemini
  static Story parseStoryXml(String xmlString) {
    final document = xml.XmlDocument.parse(xmlString);
    final storyElement = document.findAllElements('story').first;
    final storyDetailsElement = storyElement.findElements('story_details').first;

    // Parse story details
    final title = storyDetailsElement.findElements('title').first.innerText;
    final imagePrompt = storyDetailsElement.findElements('image_prompt').first.innerText;

    // Parse characters
    final charactersElement = storyDetailsElement.findElements('characters').first;
    final List<Character> characters = [];

    for (var characterElement in charactersElement.findElements('character')) {
      final name = characterElement.findElements('name').first.innerText;
      final gender = characterElement.findElements('gender').first.innerText;
      final voiceDescription = characterElement.findElements('voice_description').first.innerText;

      characters.add(Character(
        storyId: 0, // Will be replaced when saved to database
        name: name,
        gender: gender,
        voiceDescription: voiceDescription,
      ));
    }

    // Parse scenes
    final scenesElement = storyElement.findElements('scenes').first;
    final List<StoryScene> scenes = [];

    for (var sceneElement in scenesElement.findElements('scene')) {
      final sceneNumber = int.parse(sceneElement.getAttribute('number') ?? '0');
      final backgroundImage = sceneElement.findElements('background_image').first.innerText;
      final characterActions = sceneElement.findElements('character_actions').first.innerText;
      final backgroundSound = sceneElement.findElements('background_sound').first.innerText;
      final soundEffects = sceneElement.findElements('sound_effects').first.innerText;

      final List<Script> scripts = [];
      int scriptOrder = 0;

      // Parse narration script
      final narrationElement = sceneElement.findElements('narration_script').first;
      final narrationText = narrationElement.innerText;
      final language = narrationElement.getAttribute('language') ?? 'english';
      final urduFlavor = narrationElement.getAttribute('urdu_flavor') == 'true';
      final voiceAction = narrationElement.getAttribute('voice_action');

      // Add narrator script
      scripts.add(Script.narrator(
        sceneId: 0, // Will be replaced when saved to database
        scriptText: narrationText,
        language: language,
        urduFlavor: urduFlavor,
        voiceAction: voiceAction,
        scriptOrder: scriptOrder++,
      ));

      // Parse character scripts
      final characterScriptsElement = sceneElement.findElements('character_scripts').first;

      for (var scriptElement in characterScriptsElement.findElements('character')) {
        final characterName = scriptElement.getAttribute('name') ?? '';
        final scriptText = scriptElement.innerText;
        final scriptLanguage = scriptElement.getAttribute('language') ?? 'english';
        final scriptUrduFlavor = scriptElement.getAttribute('urdu_flavor') == 'true';
        final scriptVoiceAction = scriptElement.getAttribute('voice_action');

        // Find character id by name
        int characterIndex = characters.indexWhere((c) => c.name == characterName);
        if (characterIndex >= 0) {
          scripts.add(Script.character(
            sceneId: 0, // Will be replaced when saved to database
            characterId: characterIndex, // Using index as temporary ID
            scriptText: scriptText,
            language: scriptLanguage,
            urduFlavor: scriptUrduFlavor,
            voiceAction: scriptVoiceAction,
            scriptOrder: scriptOrder++,
          ));
        }
      }

      scenes.add(StoryScene(
        storyId: 0, // Will be replaced when saved to database
        sceneNumber: sceneNumber,
        backgroundImage: backgroundImage,
        characterActions: characterActions,
        backgroundSound: backgroundSound,
        soundEffects: soundEffects,
        scripts: scripts,
      ));
    }

    return Story(
      title: title,
      imagePrompt: imagePrompt,
      characters: characters,
      scenes: scenes,
    );
  }
}