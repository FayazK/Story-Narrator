// lib/utils/xml_parser.dart
import 'package:xml/xml.dart' as xml;
import 'package:flutter/foundation.dart';
import '../models/story.dart';
import '../models/character.dart';
import '../models/story_scene.dart';
import '../models/script.dart';
import '../utils/helpers/xml_parser_util.dart';

class StoryXmlParser {
  /// Clean XML string to remove unwanted formatting and characters
  static String _cleanXmlString(String xmlString) {
    // Use the standardized XML cleaner from XmlParserUtil
    return XmlParserUtil.cleanXmlString(xmlString);
  }

  /// Parse a story from XML string generated by Gemini
  static Story parseStoryXml(String xmlString) {
    try {
      // Clean the input string to remove any unwanted characters or formatting
      final cleanedXml = _cleanXmlString(xmlString);
      
      final document = xml.XmlDocument.parse(cleanedXml);
      final storyElements = document.findAllElements('story');
      
      if (storyElements.isEmpty) {
        debugPrint('No <story> element found in the XML');
        return Story(title: 'Untitled Story'); // Return a default story
      }
      
      final storyElement = storyElements.first;
      final storyDetailsElements = storyElement.findElements('story_details');
      
      if (storyDetailsElements.isEmpty) {
        debugPrint('No <story_details> element found in the XML');
        return Story(title: 'Untitled Story'); // Return a default story
      }
      
      final storyDetailsElement = storyDetailsElements.first;

      // Parse story details
      String title = '';
      String? imagePrompt;
      
      try {
        final titleElement = storyDetailsElement.findElements('title').firstOrNull;
        if (titleElement != null) {
          final fullTitle = titleElement.innerText.trim();
          
          // Handle dual-language titles (separated by |)
          if (fullTitle.contains('|')) {
            // Extract the first part (English title) before the | symbol
            title = fullTitle.split('|').first.trim();
          } else {
            title = fullTitle;
          }
        }
      } catch (e) {
        title = 'Untitled Story';
        debugPrint('Error parsing title: $e');
      }
      
      try {
        final imagePromptElement = storyDetailsElement.findElements('image_prompt').firstOrNull;
        if (imagePromptElement != null) {
          imagePrompt = imagePromptElement.innerText.trim();
        }
      } catch (e) {
        debugPrint('Error parsing image prompt: $e');
      }

      // Parse characters
      final List<Character> characters = [];
      try {
        final charactersElements = storyDetailsElement.findElements('characters');
        if (charactersElements.isNotEmpty) {
          final charactersElement = charactersElements.first;
          
          for (var characterElement in charactersElement.findElements('character')) {
            try {
              final nameElements = characterElement.findElements('n').isEmpty 
                ? characterElement.findElements('name')
                : characterElement.findElements('n');
                
              final name = nameElements.isNotEmpty 
                ? nameElements.first.innerText.trim()
                : 'Unknown Character';
                
              final genderElements = characterElement.findElements('gender');
              final gender = genderElements.isNotEmpty 
                ? genderElements.first.innerText.trim()
                : 'neutral';
                
              final voiceDescElements = characterElement.findElements('voice_description');
              final voiceDescription = voiceDescElements.isNotEmpty 
                ? voiceDescElements.first.innerText.trim()
                : 'neutral voice';

              characters.add(Character(
                storyId: 0, // Will be replaced when saved to database
                name: name,
                gender: gender,
                voiceDescription: voiceDescription,
              ));
            } catch (e) {
              debugPrint('Error parsing character: $e');
              // Add a default character if we can't parse this one
              characters.add(Character(
                storyId: 0,
                name: 'Character ${characters.length + 1}',
                gender: 'neutral',
                voiceDescription: 'neutral voice',
              ));
            }
          }
        }
      } catch (e) {
        debugPrint('Error parsing characters section: $e');
      }
      
      // If no characters were found, add a default one
      if (characters.isEmpty) {
        characters.add(Character(
          storyId: 0,
          name: 'Narrator',
          gender: 'neutral',
          voiceDescription: 'narrator voice',
        ));
      }

      // Parse scenes
      final List<StoryScene> scenes = [];
      try {
        final scenesElements = storyElement.findElements('scenes');
        if (scenesElements.isNotEmpty) {
          final scenesElement = scenesElements.first;
          
          for (var sceneElement in scenesElement.findElements('scene')) {
            try {
              // Get scene number with fallback to index + 1
              int sceneNumber = 0;
              try {
                final sceneNumberStr = sceneElement.getAttribute('number');
                sceneNumber = sceneNumberStr != null ? int.parse(sceneNumberStr) : scenes.length + 1;
              } catch (e) {
                sceneNumber = scenes.length + 1;
                debugPrint('Error parsing scene number: $e');
              }
              
              // Handle optional elements with null checks
              String? backgroundImage;
              String? characterActions;
              String? backgroundSound;
              String? soundEffects;
              
              try { backgroundImage = sceneElement.findElements('background_image').firstOrNull?.innerText.trim(); } catch (e) { /* Optional field */ }
              try { characterActions = sceneElement.findElements('character_actions').firstOrNull?.innerText.trim(); } catch (e) { /* Optional field */ }
              try { backgroundSound = sceneElement.findElements('background_sound').firstOrNull?.innerText.trim(); } catch (e) { /* Optional field */ }
              try { soundEffects = sceneElement.findElements('sound_effects').firstOrNull?.innerText.trim(); } catch (e) { /* Optional field */ }

              final List<Script> scripts = [];
              int scriptOrder = 0;

              // Parse narration script
              try {
                final narrationElements = sceneElement.findElements('narration_script');
                if (narrationElements.isNotEmpty) {
                  final narrationElement = narrationElements.first;
                  final narrationText = narrationElement.innerText.trim();
                  final language = narrationElement.getAttribute('language') ?? 'hindi';
                  final urduFlavor = narrationElement.getAttribute('urdu_flavor') == 'true';
                  final voiceAction = narrationElement.getAttribute('voice_action');

                  // Add narrator script
                  scripts.add(Script.narrator(
                    sceneId: 0, // Will be replaced when saved to database
                    scriptText: narrationText,
                    language: language,
                    urduFlavor: urduFlavor,
                    voiceAction: voiceAction,
                    scriptOrder: scriptOrder++,
                  ));
                } else {
                  // Add empty narration if none found
                  scripts.add(Script.narrator(
                    sceneId: 0,
                    scriptText: 'Scene $sceneNumber',
                    scriptOrder: scriptOrder++,
                  ));
                }
              } catch (e) {
                debugPrint('Error parsing narration script: $e');
                // If narration script is not found, create a default one
                scripts.add(Script.narrator(
                  sceneId: 0,
                  scriptText: 'Scene $sceneNumber',
                  scriptOrder: scriptOrder++,
                ));
              }

              // Parse character scripts
              try {
                final characterScriptsElements = sceneElement.findElements('character_scripts');
                if (characterScriptsElements.isNotEmpty) {
                  final characterScriptsElement = characterScriptsElements.first;

                  for (var scriptElement in characterScriptsElement.findElements('character')) {
                    try {
                      final characterName = scriptElement.getAttribute('name') ?? '';
                      final scriptText = scriptElement.innerText.trim();
                      final scriptLanguage = scriptElement.getAttribute('language') ?? 'hindi';
                      final scriptUrduFlavor = scriptElement.getAttribute('urdu_flavor') == 'true';
                      final scriptVoiceAction = scriptElement.getAttribute('voice_action');

                      // Find character by name
                      final characterIndex = characters.indexWhere((c) => c.name == characterName);
                      if (characterIndex >= 0) {
                        scripts.add(Script.character(
                          sceneId: 0, // Will be replaced when saved to database
                          characterId: -1, // Will be properly set after characters are saved
                          characterName: characterName, // Save the name for later mapping
                          scriptText: scriptText,
                          language: scriptLanguage,
                          urduFlavor: scriptUrduFlavor,
                          voiceAction: scriptVoiceAction,
                          scriptOrder: scriptOrder++,
                        ));
                      } else if (characterName.isNotEmpty) {
                        // Character not found in list, but we have a name - add a new character
                        final newCharacter = Character(
                          storyId: 0,
                          name: characterName,
                          gender: 'neutral',
                          voiceDescription: 'neutral voice',
                        );
                        characters.add(newCharacter);
                        
                        scripts.add(Script.character(
                          sceneId: 0,
                          characterId: -1,
                          characterName: characterName,
                          scriptText: scriptText,
                          language: scriptLanguage,
                          urduFlavor: scriptUrduFlavor,
                          voiceAction: scriptVoiceAction,
                          scriptOrder: scriptOrder++,
                        ));
                      }
                    } catch (e) {
                      debugPrint('Error parsing character script: $e');
                    }
                  }
                }
              } catch (e) {
                debugPrint('Error parsing character scripts section: $e');
              }

              scenes.add(StoryScene(
                storyId: 0, // Will be replaced when saved to database
                sceneNumber: sceneNumber,
                backgroundImage: backgroundImage,
                characterActions: characterActions,
                backgroundSound: backgroundSound,
                soundEffects: soundEffects,
                scripts: scripts,
              ));
            } catch (e) {
              debugPrint('Error parsing scene: $e');
            }
          }
        }
      } catch (e) {
        debugPrint('Error parsing scenes section: $e');
      }
      
      // If no scenes were found, create a default one
      if (scenes.isEmpty) {
        final defaultScript = Script.narrator(
          sceneId: 0,
          scriptText: 'This is the beginning of your story.',
          scriptOrder: 0,
        );
        
        scenes.add(StoryScene(
          storyId: 0,
          sceneNumber: 1,
          scripts: [defaultScript],
        ));
      }

      return Story(
        title: title.isNotEmpty ? title : 'Untitled Story',
        imagePrompt: imagePrompt,
        characters: characters,
        scenes: scenes,
      );
    } catch (e) {
      debugPrint('Error parsing XML: $e');
      throw Exception('Failed to parse story XML: $e');
    }
  }
}